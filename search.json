[{"path":"https://lifebrain.github.io/metagam/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://lifebrain.github.io/metagam/articles/dominance.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Dominance Plots","text":"Create 5 datasets standard gam example #1. noise parameter scaled, first GAM lowest noise last highest noise. dominance plot, plot relative contributions dataset prediction. way generated data, expect largest influence dataset 1 lowest dataset 5. Delete data first dataset values lower .2 dimension x2. Thus, expect low (.e., zero) contribution first dataset low values dimensions x2. Next, delete values second dataset large values (x2>.8).","code":"library(\"metagam\") ## simulate datasets set.seed(123) datasets <- lapply(   seq_len(num.datasets),    function(x) mgcv::gamSim(scale = x, verbose = FALSE)) df <- datasets[[1]] df[df$x2<0.2,] <- NA datasets[[1]] <- df df <- datasets[[2]] df[df$x2 > 0.8, ] <- NA datasets[[2]] <- df"},{"path":"https://lifebrain.github.io/metagam/articles/dominance.html","id":"fit-gams","dir":"Articles","previous_headings":"","what":"Fit GAMs","title":"Dominance Plots","text":"Next, fit individual GAMs eight datasets. also add names list models, pop labels dominance plots.","code":"## fit a generalized additive model to each dataset separately models <- lapply(datasets, function(dat){   ## Full fit using mgcv   gamfit <- mgcv::gam(y ~ s(x0, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\"), data = dat)   ## Extract the necessary components for performing a meta-analysis   ## This removes all subject-specific data   strip_rawdata(gamfit) }) names(models) <- c(\"A\", \"B\", \"C\", \"D\", \"E\")"},{"path":"https://lifebrain.github.io/metagam/articles/dominance.html","id":"meta-analysis","dir":"Articles","previous_headings":"","what":"Meta-Analysis","title":"Dominance Plots","text":", analyze term s(x2). can increase resolution next plot increasing grid_size, keep low reduce build time package.","code":"meta_analysis <- metagam(models, grid_size = 50, terms = \"s(x2)\")"},{"path":"https://lifebrain.github.io/metagam/articles/dominance.html","id":"dominance-analysis","dir":"Articles","previous_headings":"","what":"Dominance Analysis","title":"Dominance Plots","text":"Finally, create dominance plot tells us much points axis x2 influenced individual GAMs. Since plot_dominance returns ggplot object, can modify colors using, e.g. viridis package. see influence GAMs graded according simulated noise levels. Second, see left-hand side, influence first dataset almost zero whereas influence second dataset almost zero righthand side.","code":"plot_dominance(meta_analysis)"},{"path":"https://lifebrain.github.io/metagam/articles/heterogeneity.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Heterogeneity Plots","text":"start simulating 5 datasets using gamSim() function mgcv. use response \\(y\\) explanatory variable \\(x_{2}\\), add additional shift \\(\\beta x_{2}^{2}\\) \\(\\beta_{2}\\) differs datasets, yielding heterogeneous data.","code":"library(\"metagam\") library(\"mgcv\") #> Loading required package: nlme #> This is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'. set.seed(1233) shifts <- c(0, .5, 1, 0, -1) datasets <- lapply(shifts, function(x) {   ## Simulate data   dat <- gamSim(scale = .1, verbose = FALSE)   ## Add a shift   dat$y <- dat$y + x * dat$x2^2   ## Return data   dat })"},{"path":"https://lifebrain.github.io/metagam/articles/heterogeneity.html","id":"fit-gams","dir":"Articles","previous_headings":"","what":"Fit GAMs","title":"Heterogeneity Plots","text":"Next, analyze datasets, strip individual participant data.","code":"models <- lapply(datasets, function(dat){   b <- gam(y ~ s(x2, bs = \"cr\"), data = dat)   strip_rawdata(b)   })"},{"path":"https://lifebrain.github.io/metagam/articles/heterogeneity.html","id":"meta-analysis","dir":"Articles","previous_headings":"","what":"Meta-Analysis","title":"Heterogeneity Plots","text":"Next, meta-analyze models. Since single smooth term, use type = \"response\" get response function. equivalent using type = \"iterms\" intercept = TRUE. Next, plot separate estimates together meta-analytic fit. see dataset 3, positive shift \\(\\beta=1 x_{2}^2\\), lies others \\(x_{2}\\) close 1, opposite dataset 5.  can investigate using heterogeneity plot, visualizes Cochran’s Q-test (Cochran (1954)) function \\(x_{2}\\). default, test statistic (Q), 95 % confidence bands, plotted. can see confidence band Q 0 \\(x_{2}\\) larger 0.7.  can also plot \\(p\\)-value Cochran’s Q-test. dashed line shows value \\(0.05\\). \\(p\\)-value plot full agreement Q-statistic plot : evidence underlying functions dataset different values 0.7 .","code":"meta_analysis <- metagam(models, type = \"response\") plot(meta_analysis, legend = TRUE) plot_heterogeneity(meta_analysis) plot_heterogeneity(meta_analysis, type = \"p\")"},{"path":[]},{"path":"https://lifebrain.github.io/metagam/articles/introduction.html","id":"basic-usage-example","dir":"Articles","previous_headings":"","what":"Basic Usage Example","title":"Introduction","text":"Assume data interest located three different cohorts. order increase statistical power hence able detect relationships data, ideally fit GAM three datasets combined, using model form y ~ s(x0) + s(x1) + s(x2), y outcome interest x1 x2 explanatory variables. smooth functions s() allow outcome vary nonlinearly function explanatory variable. three datasets available single location, fit GAM using mega-analytic approach. metagam package provides flexible solution problem, illustrated. start simulation three datasets using gamSim() function mgcv. data location, assume GAM generic form y~s(x0)+s(x1)+s(x2) fit data. Notably, model parameters like knot locations, number basis functions, smoothing method need identical separate fit. Instead, parameters can optimized independently fit data location. example: gam objects fit1, fit2, fit3 contain individual participant data various forms, hence many cases shared. function strip_rawdata() metagam removes rawdata. illustrate function can applied data location order obtain model fit can shared. Now assume objects fit_no_raw1, fit_no_raw2, fit_no_raw3 gathered single location. First, can inspect objects. can now perform meta-analysis fits using metagam() function. gather list: typically convenient analyze single smooth term time. start term s(x0), set grid_size=100 get 100 equally spaced values x0 within range values encountered three model fits. summary method prints information well meta-analytic p-values term. default plotting function shows fits separate datasets together meta-analytic fit.  can add confidence intervals. \\(\\alpha\\) set call metagam, defaulting 0.05. Since ggplot object returned, can also edit appearance.  Dominance plots heterogeneity plots can also created. described separate vignettes.","code":"library(metagam) library(mgcv) ## simulate three datasets set.seed(123) datasets <- lapply(1:3, function(x) gamSim(scale = 3, verbose = FALSE)) ## Data location 1 fit1 <- gam(y ~ s(x0, k = 8, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\"),              data = datasets[[1]])  ## Data location 2, use P-splines for the first and third term fit2 <- gam(y ~ s(x0, bs = \"ps\") + s(x1, k = 20, bs = \"cr\") + s(x2, bs = \"bs\"),              data = datasets[[2]])  ## Data location 3, use maximum likelihood for smoothing fit3 <- gam(y ~ s(x0, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\"),              data = datasets[[3]], method = \"ML\") ## Data location 1 fit_no_raw1 <- strip_rawdata(fit1)  ## Data location 2 fit_no_raw2 <- strip_rawdata(fit2)  ## Data location 3 fit_no_raw3 <- strip_rawdata(fit3) summary(fit_no_raw1) #> GAM stripped for individual participant data with strip_rawdata(). #> For meta-analysis of smooth terms, use the following identifiers: s(x0), s(x1), s(x2). #>  #> Original output for gam object: #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> y ~ s(x0, k = 8, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\") #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   8.0156     0.1553   51.62   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>         edf Ref.df      F  p-value     #> s(x0) 3.746  4.565  5.782 9.26e-05 *** #> s(x1) 2.466  3.070 49.388  < 2e-16 *** #> s(x2) 7.493  8.416 33.457  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.537   Deviance explained = 55.3% #> GCV = 10.013  Scale est. = 9.645     n = 400 models <- list(cohort1 = fit_no_raw1,                 cohort2 = fit_no_raw2,                 cohort3 = fit_no_raw3) metafit <- metagam(models, terms = \"s(x0)\") summary(metafit) #> Meta-analysis of GAMs from  cohorts, using method FE. #>  #> Smooth terms analyzed: s(x0). plot(metafit) library(ggplot2) plot(metafit, ci = \"pointwise\", only_meta = TRUE) +    theme_bw() +    theme(panel.grid = element_blank())"},{"path":[]},{"path":"https://lifebrain.github.io/metagam/articles/multivariate.html","id":"gams-with-tensor-interaction-terms","dir":"Articles","previous_headings":"","what":"GAMs with Tensor Interaction Terms","title":"Multivariate Smooth Terms","text":"interested analyzing joint effect explanatory variables x z response y. can done using tensor interaction terms. illustrate using functions mgcv package showing individual participant data can removed fits meta-analyzed. first dataset, fit following model: can visualize term te(x,z) using vis.gam. See function draw gratia package even appealing visualizations. case seems interaction x z, hence making tensor interaction term useful.","code":"mod <- gam(y ~ te(x, z), data = datasets[[1]]) summary(mod) #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> y ~ te(x, z) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  0.24673    0.08726   2.828  0.00487 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>         edf Ref.df     F p-value   #> te(x,z) 3.7  4.287 2.201  0.0605 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.0135   Deviance explained = 2.06% #> GCV = 3.9497  Scale est. = 3.9135    n = 514 vis.gam(mod, view = c(\"x\", \"z\"), plot.type = \"contour\")"},{"path":"https://lifebrain.github.io/metagam/articles/multivariate.html","id":"fitting-gams-with-tensor-interaction-terms-and-removing-rawdata","dir":"Articles","previous_headings":"","what":"Fitting GAMs with Tensor Interaction Terms and Removing Rawdata","title":"Multivariate Smooth Terms","text":"Now assume model form y ~ te(x, z) fitted data five locations simulated . can replicate first fitting GAM calling strip_rawdata() resulting objects: element list fits now corresponds model without individual participant data, can shared central location meta-analysis. summary method fits reproduces summary output original mgcv::gam() fit.","code":"fits <- lapply(datasets, function(dat){   b <- gam(y ~ te(x, z), data = dat)   strip_rawdata(b) }) summary(fits[[1]]) #> GAM stripped for individual participant data with strip_rawdata(). #> For meta-analysis of smooth terms, use the following identifiers: te(x,z). #>  #> Original output for gam object: #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> y ~ te(x, z) #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  0.24673    0.08726   2.828  0.00487 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>         edf Ref.df     F p-value   #> te(x,z) 3.7  4.287 2.201  0.0605 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.0135   Deviance explained = 2.06% #> GCV = 3.9497  Scale est. = 3.9135    n = 514"},{"path":"https://lifebrain.github.io/metagam/articles/multivariate.html","id":"meta-analyzing-gams-with-tensor-interaction-terms","dir":"Articles","previous_headings":"","what":"Meta-Analyzing GAMs with Tensor Interaction Terms","title":"Multivariate Smooth Terms","text":"Assuming GAM fits without individual participant data gathered single location put list named fits (), meta-analytic can now computed using metagam(). grid provided, metagam() sets grid argument grid_size determines number unique values term. Using default grid_size = 100 case means grid 100 x 100 = 10,000 rows. Performing meta-analysis points might take moments, set grid_size = 20 get first rough estimate. summary method prints information model fit. can plot corresponding meta-analytic fit. plot can made fine-grained increasing grid_size argument metagam.","code":"metafit <- metagam(fits, grid_size = 20) summary(metafit) #> Meta-analysis of GAMs from  cohorts, using method FE. #>  #> Smooth terms analyzed: te(x,z). plot(metafit)"},{"path":[]},{"path":"https://lifebrain.github.io/metagam/articles/pvals.html","id":"what-can-go-wrong-when-combining-p-values","dir":"Articles","previous_headings":"","what":"What can go wrong when combining p-values?","title":"Simultaneous confidence intervals and p-values","text":"Consider two datasets , completely opposite effects. also included code simulating data.  Fitting GAM dataset separately, see effect significant \\(\\alpha = 0.05\\) level. Now let us try metagam fit. Plotting meta-analytic fit, see 95 % confidence bands completely cover zero.  object returned metagam pvals element contains p-values term individual fit. Combining p-values using methods available metap, however see effects significant \\(\\alpha = 0.05\\). happens combination p-values aware direction effects. Hence, rather part package, suggest users know ’re combine p-values using metap package. comparison, fitting linear model dataset combining slopes using metafor gives p-value 0.9296, makes lot sense.","code":"mod1 <- gam(y ~ s(x, bs = \"cr\"), data = dd$dat1) summary(mod1) #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> y ~ s(x, bs = \"cr\") #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.50554    0.06587   7.674 1.25e-11 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>      edf Ref.df     F  p-value     #> s(x)   1      1 24.26 3.61e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =   0.19   Deviance explained = 19.8% #> GCV = 0.4428  Scale est. = 0.43394   n = 100 mod2 <- gam(y ~ s(x, bs = \"cr\"), data = dd$dat2) summary(mod2) #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: #> y ~ s(x, bs = \"cr\") #>  #> Parametric coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.46800    0.07367  -6.352 6.72e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Approximate significance of smooth terms: #>        edf Ref.df     F p-value    #> s(x) 1.237  1.436 10.65 0.00112 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> R-sq.(adj) =  0.117   Deviance explained = 12.8% #> GCV = 0.55517  Scale est. = 0.54275   n = 100 models <- list(strip_rawdata(mod1), strip_rawdata(mod2)) metafit <- metagam(models) plot(metafit, ci = \"pointwise\", legend = FALSE) metafit$pvals #> [[1]] #>      edf Ref.df       F      p-value #> s(x)   1      1 24.2593 3.612591e-06 #>  #> [[2]] #>           edf   Ref.df        F    p-value #> s(x) 1.236565 1.436059 10.64571 0.00112122 library(\"metap\") allmetap(p = unlist(lapply(metafit$pvals, function(x) as.data.frame(x)[, \"p-value\"])),           method = \"all\") #>                     p valid    eponym #> logitp   5.618196e-07     2           #> maximump 1.257134e-06     2           #> meanp              NA     2           #> meanz    6.758351e-08     2           #> minimump 7.225169e-06     2   Tippett #> sumlog   8.232425e-08     2    Fisher #> sump      6.32624e-07     2 Edgington #> sumz     4.810753e-08     2  Stouffer mod1 <- lm(y ~ x, data = dd$dat1) mod2 <- lm(y ~ x, data = dd$dat2)  estimates <- c(coef(mod1)[[\"x\"]], coef(mod2)[[\"x\"]]) sampling_variances <- c(vcov(mod1)[[\"x\", \"x\"]], vcov(mod2)[[\"x\", \"x\"]]) rma(estimates, vi = sampling_variances) #>  #> Random-Effects Model (k = 2; tau^2 estimator: REML) #>  #> tau^2 (estimated amount of total heterogeneity): 2.4526 (SE = 3.5661) #> tau (square root of estimated tau^2 value):      1.5661 #> I^2 (total heterogeneity / total variability):   97.26% #> H^2 (total variability / sampling variability):  36.54 #>  #> Test for Heterogeneity: #> Q(df = 1) = 36.5396, p-val < .0001 #>  #> Model Results: #>  #> estimate      se    zval    pval    ci.lb   ci.ub     #>   0.0992  1.1229  0.0884  0.9296  -2.1015  2.3000     #>  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":[]},{"path":"https://lifebrain.github.io/metagam/articles/pvals.html","id":"simultaneous-confidence-intervals","dir":"Articles","previous_headings":"A better way to compute p-values?","what":"Simultaneous confidence intervals","title":"Simultaneous confidence intervals and p-values","text":"Let’s create another GAM fit, time using gamSim function. dashed lines plot correspond two standard errors estimate. However, pointwise confidence interval, practical purposes means repeated sampling population, contain true function less 95 % times. See, e.g., Chapter 6.5 Ruppert, Wand, Carroll (2003), Sørensen, Walhovd, Fjell (2021) blog post. need simultaneous confidence interval.  see critical value 95 % simultaneous interval 2. (Note nsim set relatively low avoid vignette compilation taking long. real application probably higher.) can plot two together, see simultaneous confidence interval bigger.","code":"set.seed(123) dat <- gamSim(verbose = FALSE) mod <- gam(y ~ s(x0, bs = \"cr\"), data = dat) plot(mod) newdat <- with(dat, data.frame(x0 = seq(min(x0), max(x0), length = 200))) masd <- getmasd(mod, newdat = newdat, nsim = 1000, term = \"s(x0)\") (crit <- quantile(masd, prob = .95, type = 8)) #>      95%  #> 2.356271 fit <- predict(mod, newdata = newdat, se.fit = TRUE) dat <- data.frame(   x0 = newdat$x0,   pred = fit$fit,   ci_pt_lb = fit$fit + qnorm(.025) * fit$se.fit,   ci_pt_ub = fit$fit + qnorm(.975) * fit$se.fit,   ci_sim_lb = fit$fit - crit * fit$se.fit,   ci_sim_ub = fit$fit + crit * fit$se.fit )  plot(dat$x0, dat$pred, type = \"l\",      ylim = range(dat$ci_sim_lb, dat$ci_sim_ub),       xlab = \"x0\", ylab = \"s(x0)\") polygon(   x = c(rev(dat$x0), dat$x0), y = c(rev(dat$ci_sim_ub), dat$ci_sim_lb),   col = \"gray80\", border = NA ) polygon(   x = c(rev(dat$x0), dat$x0), y = c(rev(dat$ci_pt_ub), dat$ci_pt_lb),   col = \"gray60\", border = NA ) lines(dat$x0, dat$pred)  legend(x = \"bottom\", legend = c(\"Pointwise\", \"Simultaneous\"),        fill = c(\"gray60\", \"gray80\"))"},{"path":"https://lifebrain.github.io/metagam/articles/pvals.html","id":"combining-simultaneous-confidence-intervals","dir":"Articles","previous_headings":"A better way to compute p-values?","what":"Combining simultaneous confidence intervals","title":"Simultaneous confidence intervals and p-values","text":"metagam, possible combine simultaneous confidence intervals separate fit. critical value multiplied standard errors used weight meta analytically combined. Significance testing can done checking possible fit constant function within simultaneous confidence bands, checking whether maximum lower band across range x-values larger minimum upper band across range x-values. illustrate .  p-value printed model summary. order get digits decimal point p-value, increase nsim argument.","code":"set.seed(124) datasets <- lapply(1:5, function(x) gamSim(scale = 5, verbose = FALSE))  models <- lapply(datasets, function(dat){   model <- gam(y ~ s(x2, bs = \"cr\"), data = dat)   strip_rawdata(model) }) names(models) <- paste(\"Model\", letters[1:5])  meta_analysis <- metagam(models, terms = \"s(x2)\", grid_size = 100,                          nsim = 10000, ci_alpha = .05) plot(meta_analysis, ci = \"both\", legend = TRUE) summary(meta_analysis) #> Meta-analysis of GAMs from  cohorts, using method FE. #>  #> Smooth terms analyzed: s(x2). #>  #> P-values for smooth terms: #> s(x2): < 1e-04"},{"path":"https://lifebrain.github.io/metagam/articles/pvals.html","id":"does-it-work","dir":"Articles","previous_headings":"A better way to compute p-values?","what":"Does it work?","title":"Simultaneous confidence intervals and p-values","text":"shouldn’t trust single example, show simulations. simulating case true relationship zero, check distribution p-values close uniform?  quantile plot looks sufficiently satisfactory include package. conduct much extensive simulation studies future paper.","code":"library(parallel) cl <- makeCluster(10) pvals <- parLapply(   cl = cl, X = 1:100, fun = function(x){     models <- lapply(1:5, function(i){       dat <- data.frame(x = runif(100), y = rnorm(100))       mod <- mgcv::gam(y ~ s(x, bs = \"cr\"), data = dat)       metagam::strip_rawdata(mod)       })     fit <- metagam::metagam(models, nsim = 1000, ci_alpha = .05)     fit$simulation_results$`s(x)`$pval   } ) stopCluster(cl)  plot(qunif(seq(from = 0, to = 1, length.out = 100)),       sort(as.numeric(unlist(pvals))),      xlab = \"Theoretical quantile\",      ylab = \"Data quantile\") abline(0, 1)"},{"path":[]},{"path":"https://lifebrain.github.io/metagam/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oystein Sorensen. Author, maintainer. Andreas M. Brandmaier. Author. Athanasia Mo Mowinckel. Author.","code":""},{"path":"https://lifebrain.github.io/metagam/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sørensen Ø, Brandmaier , Macià D, Ebmeier K, Ghisletta P, Kievit R, Mowinckel , Walhovd K, Westerhausen R, Fjell (2021). “Meta-Analysis Generalized Additive Models Neuroimaging Studies.” NeuroImage, 224, 117416. doi:10.1016/j.neuroimage.2020.117416.","code":"@Article{,   author = {{\\O}ystein S{\\o}rensen and Andreas M. Brandmaier and D{\\'{\\i}}dac Maci{\\`{a}} and Klaus Ebmeier and Paolo Ghisletta and Rogier A. Kievit and Athanasia M. Mowinckel and Kristine B. Walhovd and Rene Westerhausen and Anders M. Fjell},   doi = {10.1016/j.neuroimage.2020.117416},   title = {Meta-Analysis of Generalized Additive Models in Neuroimaging Studies},   journal = {NeuroImage},   pages = {117416},   volume = {224},   year = {2021}, }"},{"path":[]},{"path":"https://lifebrain.github.io/metagam/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Meta-Analysis of Generalized Additive Models","text":"metagam R-package meta-analysis generalized additive models (GAMs). main application cases raw data located multiple locations, shared due ethical regulatory restrictions. metagam provides functions removing individual participant data GAMs fitted separately location, resulting object can shared central location. Next, metagam provides functions meta-analysing fitted GAMs using pointwise meta-analysis, well plotting summary methods analyzing meta-analytic fits. methods implemented described Sorensen et al. (2021), extending upon previous works Schwartz Zanobetti (2000) Crippa, Thomas, Orsini (2018). Currently, GAMs objects created following functions supported: package mgcv: bam(), gam() gamm(). package gamm4: gamm4(). package development, changes interface can expected. Suggestions improvements bug reports warmly welcome, either filing Issue opening Pull Request.","code":""},{"path":"https://lifebrain.github.io/metagam/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Meta-Analysis of Generalized Additive Models","text":"Install current release metagam CRAN : Install current development version metagam GitHub :","code":"install.packages(\"metagam\") # install.packages(\"remotes\") remotes::install_github(\"lifebrain/metagam\")"},{"path":"https://lifebrain.github.io/metagam/index.html","id":"application-example","dir":"","previous_headings":"","what":"Application Example","title":"Meta-Analysis of Generalized Additive Models","text":"Simulate three datasets fit GAM . use strip_rawdata() metagam remove individual participant data. models now list containing three GAMs without individual participant data. can meta-analyze using metagam(). documentation vignettes, please visit package website.","code":"library(\"metagam\") library(\"mgcv\") #> Loading required package: nlme #> This is mgcv 1.8-38. For overview type 'help(\"mgcv-package\")'. ## Set seed for reproducible random numbers set.seed(8562957) ## Simulate using mgcv::gamSim datasets <- lapply(1:3, function(x) gamSim(verbose = FALSE)) ## Fit a model to each dataset models <- lapply(datasets, function(dat){   ## Full gam with mgcv   full_model <- gam(y ~ s(x2, bs = \"cr\"), data = dat)   ## Strip rawdata   strip_rawdata(full_model) }) meta_analysis <- metagam(models) summary(meta_analysis) #> Meta-analysis of GAMs from 3 cohorts, using method FE. #>  #> Smooth terms analyzed: s(x2)."},{"path":"https://lifebrain.github.io/metagam/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Meta-Analysis of Generalized Additive Models","text":"Please note metagam project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://lifebrain.github.io/metagam/news.html","id":null,"dir":"","previous_headings":"","what":"metagam (development versions)","title":"metagam (development versions)","text":"Added workaround allows providing unused variables terms argument used.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-040","dir":"","previous_headings":"","what":"metagam version 0.4.0","title":"metagam (development versions)","text":"Added meta_only option plot.metagam(). Bug fix plots. Added back label option plot_dominance. large number internal changes make package maintenance easier package stable. Standard error intercept now included simulations p-values simultaneous confidence intervals type=“iterms”.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-031","dir":"","previous_headings":"","what":"metagam version 0.3.1","title":"metagam (development versions)","text":"‘knitr’ moved Imports Suggests.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0309000","dir":"","previous_headings":"","what":"metagam version 0.3.0.9000","title":"metagam (development versions)","text":"Fixed bug caused metagam crash special characters (particular ’_’ ‘.’) variable names.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-030","dir":"","previous_headings":"","what":"metagam version 0.3.0","title":"metagam (development versions)","text":"major revision package containing changes described since 0.2.0 .","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0209002","dir":"","previous_headings":"","what":"metagam version 0.2.0.9002","title":"metagam (development versions)","text":"Large number dependencies removed, make metagam less sensitive errors packages make easier install different platforms. Simultaneous confidence intervals added. Computation p-values completely revised. previous method give nonsensical answers cases effects pointed different directions different datasets. vignette p-values simultaneous confidence intervals added.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0209001","dir":"","previous_headings":"","what":"metagam version 0.2.0.9001","title":"metagam (development versions)","text":"removed viridis Suggests, reduce number dependencies. removed gratia Suggests.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0209000","dir":"","previous_headings":"","what":"metagam version 0.2.0.9000","title":"metagam (development versions)","text":"Parallelism support removed, buggy. refactor code considering adding back.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-020","dir":"","previous_headings":"","what":"metagam version 0.2.0","title":"metagam (development versions)","text":"Proper support parallelism added, thanks Henrik Bengtsson. See example help(“metagam”).","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0129002","dir":"","previous_headings":"","what":"metagam version 0.1.2.9002","title":"metagam (development versions)","text":"Fixed issue #30. Running parallel caused error.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0129001","dir":"","previous_headings":"","what":"metagam version 0.1.2.9001","title":"metagam (development versions)","text":"Updated citation paper published NeuroImage.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0129000","dir":"","previous_headings":"","what":"metagam version 0.1.2.9000","title":"metagam (development versions)","text":"Updated recommended citation paper accepted NeuroImage.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-012","dir":"","previous_headings":"","what":"metagam version 0.1.2","title":"metagam (development versions)","text":"README updated suggest installation using Bioconductor message now printed user startup multtest installed. consequence, multtest added Suggests:","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-0119000","dir":"","previous_headings":"","what":"metagam version 0.1.1.9000","title":"metagam (development versions)","text":"Moved package ‘viridis’ Imports Suggests, since ‘viridis’ hard install platforms.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-011","dir":"","previous_headings":"","what":"metagam version 0.1.1","title":"metagam (development versions)","text":"Internal change makes metagam compatible dplyr 1.0.0.","code":""},{"path":"https://lifebrain.github.io/metagam/news.html","id":"metagam-version-010","dir":"","previous_headings":"","what":"metagam version 0.1.0","title":"metagam (development versions)","text":"initial release.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/getmasd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get maximum of the absolute standard deviations — getmasd","title":"Get maximum of the absolute standard deviations — getmasd","text":"code based Dr. Gavin Simpson's blog post https://fromthebottomoftheheap.net/2016/12/15/simultaneous-interval-revisited/.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/getmasd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get maximum of the absolute standard deviations — getmasd","text":"","code":"getmasd(mod, newdat, nsim, term)"},{"path":"https://lifebrain.github.io/metagam/reference/getmasd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get maximum of the absolute standard deviations — getmasd","text":"mod Object class \"striprawdata\", returned strip_rawdata. newdat Grid values create simultaneous confidence interval. nsim Number Monte Carlo samples. term Character vector smooth terms.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/getmasd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get maximum of the absolute standard deviations — getmasd","text":"vector maxima absolute standard deviations.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/make_heterogeneity_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare heterogeneity data — make_heterogeneity_data","title":"Prepare heterogeneity data — make_heterogeneity_data","text":"Internal function prepare data heterogeneity plots","code":""},{"path":"https://lifebrain.github.io/metagam/reference/make_heterogeneity_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare heterogeneity data — make_heterogeneity_data","text":"","code":"make_heterogeneity_data(x, term, xvar)"},{"path":"https://lifebrain.github.io/metagam/reference/make_heterogeneity_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare heterogeneity data — make_heterogeneity_data","text":"x Object returned metagam. term Character specifying smooth term plot. Defaults NULL; x fitted single term, one taken.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/make_heterogeneity_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare heterogeneity data — make_heterogeneity_data","text":"data.frame","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metagam: Meta-analysis of generalized additive models. — metagam-package","title":"metagam: Meta-analysis of generalized additive models. — metagam-package","text":"main functions metagam package described .","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam-package.html","id":"stripping-rawdata","dir":"Reference","previous_headings":"","what":"Stripping rawdata","title":"metagam: Meta-analysis of generalized additive models. — metagam-package","text":"function strip_rawdata takes   fit produced functions packages mgcv gamm4   removes individual participants data.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam-package.html","id":"meta-analysis","dir":"Reference","previous_headings":"","what":"Meta-analysis","title":"metagam: Meta-analysis of generalized additive models. — metagam-package","text":"function metagam takes list   fits produced strip_rawdata computes meta-analytic   fits.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam-package.html","id":"plotting","dir":"Reference","previous_headings":"","what":"Plotting","title":"metagam: Meta-analysis of generalized additive models. — metagam-package","text":"functions plot_dominance   plot_heterogeneity can used study meta-analytic fit   computed strip_rawdata.","code":""},{"path":[]},{"path":"https://lifebrain.github.io/metagam/reference/metagam-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metagam: Meta-analysis of generalized additive models. — metagam-package","text":"Maintainer: Oystein Sorensen oystein.sorensen@psykologi.uio.(ORCID) Authors: Andreas M. Brandmaier brandmaier@mpib-berlin.mpg.de (ORCID) Athanasia Mo Mowinckel .m.mowinckel@psykologi.uio.(ORCID)","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-analysis of generalized additive models — metagam","title":"Meta-analysis of generalized additive models — metagam","text":"Meta-analysis generalized additive models","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-analysis of generalized additive models — metagam","text":"","code":"metagam(   models,   grid = NULL,   grid_size = 100,   type = \"iterms\",   terms = NULL,   method = \"FE\",   nsim = NULL,   ci_alpha = 0.05,   restrict_range = NULL )"},{"path":"https://lifebrain.github.io/metagam/reference/metagam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-analysis of generalized additive models — metagam","text":"models List generalized additive models, returned strip_rawdata. list named, names used output. grid Grid values explanatory variables compute estimated smooth terms. Defaults NULL, means grid set smooth terms defined terms argument, length given grid_size numeric variables single value factor variable. grid_size Numeric value giving number elements use grid explanatory variables grid=NULL. multiple terms supplied, combination values explanatory variables generated, number grid points becomes grid_size power number terms. type Type prediction use. Defaults \"iterms\". Available options \"iterms\", \"link\", \"response\". See documentation mgcv::predict.gam details. Note type=\"terms\" supported, since may result estimated zero standard deviation smooth terms. terms Character vector terms, smooth parametric, included function estimate. used type=\"iterms\". Defaults NULL, means first smooth term listed alphabetic order taken. method Method meta analysis, passed metafor::rma.uni. Defaults \"FE\". See documentation metafor::rma available options. nsim Number simulations conduct order compute p-values simultaneous confidence bands meta-analytic fit. Defaults NULL, means simulations performed. used type=\"iterms\". ci_alpha Significance level simultaneous confidence bands. Ignored nsim NULL, defaults 0.05. restrict_range Character vector explanatory variables restrict values within range cohort contribute meta-analysis. Default NULL, means model contributes across whole range specified grid. Currently implemented.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta-analysis of generalized additive models — metagam","text":"object type metagam.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Meta-analysis of generalized additive models — metagam","text":"currently assumed models fit   smooth terms, although need basis functions   knot placement. Future versions also include meta-analysis   parametric terms models. p-values truncated 1e-16 computing meta-analytic   p-values ensure values identically zero, imply   alternative hypothesis true uncertainty.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/metagam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta-analysis of generalized additive models — metagam","text":"","code":"library(metagam) library(mgcv) #> Loading required package: nlme #> This is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'.  ## Create 5 datasets set.seed(1234) datasets <- lapply(1:5, function(x) gamSim(scale = 5, verbose = FALSE))  ## Fit a GAM in each dataset, then use strip_rawdata() to remove ## individual participant data models <- lapply(datasets, function(dat){   ## This uses the gam() function from mgcv   model <- gam(y ~ s(x0, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\"), data = dat)   ## This uses strip_rawdata() from metagam   strip_rawdata(model) })  ## Next, we meta-analyze the models. ## It is often most convenient to analyze a single term at a time. We focus on s(x1). meta_analysis <- metagam(models, terms = \"s(x1)\", grid_size = 30)  ## We can print some information summary(meta_analysis) #> Meta-analysis of GAMs from  cohorts, using method FE. #>  #> Smooth terms analyzed: s(x1). #>  #>  #>   ## We can plot the meta-analytic fit together with the individual fits plot(meta_analysis)  plot(meta_analysis, ci = \"pointwise\")   ## We can also compute p-values and simultaneous confidence intervals, by setting the nsim argument. ## For details, see the separate vignette. if (FALSE) {   meta_analysis <- metagam(models, terms = \"s(x0)\", grid_size = 30, nsim = 1000)   summary(meta_analysis)   plot(meta_analysis, ci = \"both\")   plot(meta_analysis, ci = \"simultaneous\") }"},{"path":"https://lifebrain.github.io/metagam/reference/plot.metagam.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot estimated smooth terms — plot.metagam","title":"Plot estimated smooth terms — plot.metagam","text":"Plot meta-analytic estimate smooth term along separate fits cohort.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot.metagam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot estimated smooth terms — plot.metagam","text":"","code":"# S3 method for metagam plot(x, term = NULL, ci = \"none\", legend = FALSE, only_meta = FALSE, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/plot.metagam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot estimated smooth terms — plot.metagam","text":"x Object returned metagam. term smooth term plot. Defaults NULL, means first term plotted. ci Type confidence bands plot around meta-analytic fit. Defaults \"none\", means bands plotted. options \"simultaneous\", \"pointwise\", \"\". Simultaneous confidence bands require metagam run nsim equal NULL. legend Logical specifying whether plot legend. Defaults FALSE. only_meta Logical specifying whether include fits study, plot meta-analytic fit. Defaults FALSE. ... arguments plot.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot.metagam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot estimated smooth terms — plot.metagam","text":"function called side effect producing plot.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot.metagam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot estimated smooth terms — plot.metagam","text":"","code":"library(metagam) library(mgcv)  ## Create 5 datasets set.seed(1234) datasets <- lapply(1:5, function(x) gamSim(scale = 5, verbose = FALSE))  ## Fit a GAM in each dataset, then use strip_rawdata() to remove ## individual participant data models <- lapply(datasets, function(dat){   ## This uses the gam() function from mgcv   model <- gam(y ~ s(x0, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\"), data = dat)   ## This uses strip_rawdata() from metagam   strip_rawdata(model) })  ## Next, we meta-analyze the models. ## It is often most convenient to analyze a single term at a time. We focus on s(x1). meta_analysis <- metagam(models, terms = \"s(x1)\", grid_size = 30)  ## We can print some information summary(meta_analysis) #> Meta-analysis of GAMs from  cohorts, using method FE. #>  #> Smooth terms analyzed: s(x1). #>  #>  #>   ## We can plot the meta-analytic fit together with the individual fits plot(meta_analysis)  plot(meta_analysis, ci = \"pointwise\")   ## We can also compute p-values and simultaneous confidence intervals, by setting the nsim argument. ## For details, see the separate vignette. if (FALSE) {   meta_analysis <- metagam(models, terms = \"s(x0)\", grid_size = 30, nsim = 1000)   summary(meta_analysis)   plot(meta_analysis, ci = \"both\")   plot(meta_analysis, ci = \"simultaneous\") }"},{"path":"https://lifebrain.github.io/metagam/reference/plot_between_study_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot between-study standard deviation — plot_between_study_sd","title":"Plot between-study standard deviation — plot_between_study_sd","text":"random effects meta analysis used, function visualizes -study standard deviation depends explanatory variable.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_between_study_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot between-study standard deviation — plot_between_study_sd","text":"","code":"plot_between_study_sd(x)"},{"path":"https://lifebrain.github.io/metagam/reference/plot_between_study_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot between-study standard deviation — plot_between_study_sd","text":"x Object returned metagam.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_between_study_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot between-study standard deviation — plot_between_study_sd","text":"ggplot object.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_between_study_sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot between-study standard deviation — plot_between_study_sd","text":"","code":"library(\"mgcv\") set.seed(1233) shifts <- c(0, .5, 1, 0, -1) datasets <- lapply(shifts, function(x) {   ## Simulate data   dat <- gamSim(scale = .1, verbose = FALSE)   ## Add a shift   dat$y <- dat$y + x * dat$x2^2   ## Return data   dat })  models <- lapply(datasets, function(dat){   b <- gam(y ~ s(x2, bs = \"cr\"), data = dat)   strip_rawdata(b) })  meta_analysis <- metagam(models, method = \"REML\")  plot_between_study_sd(meta_analysis)"},{"path":"https://lifebrain.github.io/metagam/reference/plot_dominance.html","id":null,"dir":"Reference","previous_headings":"","what":"Dominance plot — plot_dominance","title":"Dominance plot — plot_dominance","text":"Plots (relative) contribution individual GAMs data point given axis. shows whether parts axis dominated certain individual GAMs.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_dominance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dominance plot — plot_dominance","text":"","code":"plot_dominance(x, term = NULL, relative = TRUE, width = NULL)"},{"path":"https://lifebrain.github.io/metagam/reference/plot_dominance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dominance plot — plot_dominance","text":"x Object returned metagam. term Character specifying smooth term plot. Default NULL means first term (alphabetic order) taken. relative Logical specifying whether relative absolute scales. Defaults TRUE. width Width bars. Default NULL, means automatically determined based minimum grid spacing x.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_dominance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dominance plot — plot_dominance","text":"ggplot object.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_dominance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dominance plot — plot_dominance","text":"","code":"# See the vignette, either at https://lifebrain.github.io/metagam/articles/articles/dominance.html # or by typing the following in the console: # vignette(\"Dominance\")"},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Heterogeneity Plot — plot_heterogeneity","title":"Heterogeneity Plot — plot_heterogeneity","text":"Heterogeneity Plot","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heterogeneity Plot — plot_heterogeneity","text":"","code":"plot_heterogeneity(x, term = NULL, type = \"Q\", alpha_thresh = 0.05)"},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heterogeneity Plot — plot_heterogeneity","text":"x Object returned metagam. term Character specifying smooth term plot. Defaults NULL; x fitted single term, one taken. type Character specifying type plot. Either \"Q\" test statistic \"p\" p-value. Defaults \"Q\". alpha_thresh Significance level. Defaults .05.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heterogeneity Plot — plot_heterogeneity","text":"ggplot object.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heterogeneity Plot — plot_heterogeneity","text":"plot visualizes heterogeneity along given axis, using Cochran's Q test.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heterogeneity Plot — plot_heterogeneity","text":"","code":"# See the vignette, either at https://lifebrain.github.io/metagam/articles/heterogeneity.html # or by typing the following in the console: # vignette(\"heterogeneity\")"},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Heterogeneity p-plot — plot_heterogeneity_p","title":"Heterogeneity p-plot — plot_heterogeneity_p","text":"Internal function plot heterogeneity p values","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heterogeneity p-plot — plot_heterogeneity_p","text":"","code":"plot_heterogeneity_p(data, xvar, alpha_thresh)"},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heterogeneity p-plot — plot_heterogeneity_p","text":"data data made make_heterogeneity_data. alpha_thresh Significance level. Defaults .05.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heterogeneity p-plot — plot_heterogeneity_p","text":"ggproto object","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Heterogeneity Q-plot — plot_heterogeneity_q","title":"Heterogeneity Q-plot — plot_heterogeneity_q","text":"Internal function plot heterogeneity Q values","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heterogeneity Q-plot — plot_heterogeneity_q","text":"","code":"plot_heterogeneity_q(data, xvar, alpha_thresh)"},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heterogeneity Q-plot — plot_heterogeneity_q","text":"data data made make_heterogeneity_data. alpha_thresh Significance level. Defaults .05.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/plot_heterogeneity_q.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heterogeneity Q-plot — plot_heterogeneity_q","text":"ggproto object","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.metagam.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for metagam objects. — print.metagam","title":"Print method for metagam objects. — print.metagam","text":"Print method metagam objects.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.metagam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for metagam objects. — print.metagam","text":"","code":"# S3 method for metagam print(x, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/print.metagam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for metagam objects. — print.metagam","text":"x Object class metagam. ... arguments (used).","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.metagam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for metagam objects. — print.metagam","text":"function invisibly returns input argument x.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.striprawdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for striprawdata — print.striprawdata","title":"Print method for striprawdata — print.striprawdata","text":"Print method striprawdata","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.striprawdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for striprawdata — print.striprawdata","text":"","code":"# S3 method for striprawdata print(x, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/print.striprawdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for striprawdata — print.striprawdata","text":"x Object class striprawdata. ... arguments.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.striprawdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for striprawdata — print.striprawdata","text":"function invisibly returns argument.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.summary.metagam.html","id":null,"dir":"Reference","previous_headings":"","what":"Print output from summary of metagam fit. — print.summary.metagam","title":"Print output from summary of metagam fit. — print.summary.metagam","text":"Print output summary metagam fit.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.summary.metagam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print output from summary of metagam fit. — print.summary.metagam","text":"","code":"# S3 method for summary.metagam print(x, digits = 8, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/print.summary.metagam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print output from summary of metagam fit. — print.summary.metagam","text":"x summary.metagam object digits Number digits print meta-analytic p-values ... arguments","code":""},{"path":"https://lifebrain.github.io/metagam/reference/print.summary.metagam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print output from summary of metagam fit. — print.summary.metagam","text":"function invisibly returns input argument x.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip rawdata from a generalized additive model — strip_rawdata","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"function removes individual participant data generalized additive model object, keeping aggregated quantities. resulting object can shared without exposing individual participant data.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"","code":"strip_rawdata(model, path = NULL, save_ranges = TRUE, ...)  # S3 method for list strip_rawdata(model, path = NULL, save_ranges = TRUE, ...)  # S3 method for gamm strip_rawdata(model, path = NULL, save_ranges = TRUE, ...)  # S3 method for bam strip_rawdata(model, path = NULL, save_ranges = TRUE, ...)  # S3 method for gam strip_rawdata(model, path = NULL, save_ranges = TRUE, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"model model fitted using mgcv::gam, mgcv::bam, mgcv::gamm, gamm4::gamm4. path Optional path save object .rds file. save_ranges Logical specifying whether save ranges variable used model. numeric variables amounts minimum maximum, factors levels saved. values list element var.summary returned object. ... arguments (used).","code":""},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"Model object individual participant data removed.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"Thin plate regression splines (bs='tp' bs='ts') Duchon splines bs='ds' currently supported, since splines mgcv requires unique values explanatory variables smooth term predict method work. Future updates package fix .","code":""},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"strip_rawdata(list): Strip rawdata list object returned gamm4 strip_rawdata(gamm): Strip rawdata gamm object strip_rawdata(bam): Strip rawdata gam object strip_rawdata(gam): Strip rawdata gam object","code":""},{"path":"https://lifebrain.github.io/metagam/reference/strip_rawdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip rawdata from a generalized additive model — strip_rawdata","text":"","code":"library(metagam) library(mgcv)  ## Create 5 datasets set.seed(1234) datasets <- lapply(1:5, function(x) gamSim(scale = 5, verbose = FALSE))  ## Fit a GAM in each dataset, then use strip_rawdata() to remove ## individual participant data models <- lapply(datasets, function(dat){   ## This uses the gam() function from mgcv   model <- gam(y ~ s(x0, bs = \"cr\") + s(x1, bs = \"cr\") + s(x2, bs = \"cr\"), data = dat)   ## This uses strip_rawdata() from metagam   strip_rawdata(model) })  ## Next, we meta-analyze the models. ## It is often most convenient to analyze a single term at a time. We focus on s(x1). meta_analysis <- metagam(models, terms = \"s(x1)\", grid_size = 30)  ## We can print some information summary(meta_analysis) #> Meta-analysis of GAMs from  cohorts, using method FE. #>  #> Smooth terms analyzed: s(x1). #>  #>  #>   ## We can plot the meta-analytic fit together with the individual fits plot(meta_analysis)  plot(meta_analysis, ci = \"pointwise\")   ## We can also compute p-values and simultaneous confidence intervals, by setting the nsim argument. ## For details, see the separate vignette. if (FALSE) {   meta_analysis <- metagam(models, terms = \"s(x0)\", grid_size = 30, nsim = 1000)   summary(meta_analysis)   plot(meta_analysis, ci = \"both\")   plot(meta_analysis, ci = \"simultaneous\") }"},{"path":"https://lifebrain.github.io/metagam/reference/summary.metagam.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for metagam objects — summary.metagam","title":"Summary method for metagam objects — summary.metagam","text":"Summary method metagam objects","code":""},{"path":"https://lifebrain.github.io/metagam/reference/summary.metagam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for metagam objects — summary.metagam","text":"","code":"# S3 method for metagam summary(object, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/summary.metagam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for metagam objects — summary.metagam","text":"object metagam object returned metagam. ... arguments (used).","code":""},{"path":"https://lifebrain.github.io/metagam/reference/summary.metagam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for metagam objects — summary.metagam","text":"list class summary.metagam containing following information: meta_pvals: dataframe p-values individual fit. can meta-analytically   combined using metap package. terms: smooth terms meta-analyzed. method: method used meta-analysis. See metafor package detailed description. intercept: logical specifying whether intercept included meta-analysis. cohorts: Number datasets (\"cohorts\") used meta-analysis.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/summary.striprawdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for GAMs stripped for rawdata — summary.striprawdata","title":"Summary method for GAMs stripped for rawdata — summary.striprawdata","text":"Summary method GAMs stripped rawdata","code":""},{"path":"https://lifebrain.github.io/metagam/reference/summary.striprawdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for GAMs stripped for rawdata — summary.striprawdata","text":"","code":"# S3 method for striprawdata summary(object, ...)"},{"path":"https://lifebrain.github.io/metagam/reference/summary.striprawdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for GAMs stripped for rawdata — summary.striprawdata","text":"object Object returned strip_rawdata. ... arguments.","code":""},{"path":"https://lifebrain.github.io/metagam/reference/summary.striprawdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for GAMs stripped for rawdata — summary.striprawdata","text":"function returns input argument, printed console.","code":""}]
